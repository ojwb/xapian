name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: master
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  makedist:
    name: 'make dist'
    runs-on: 'ubuntu-latest'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Cache bootstrap tools
      uses: actions/cache@v4
      with:
        path: |
          BUILD
          INST
        key: ${{ github.job }}-${{ runner.os }}-${{ hashFiles( 'bootstrap', 'patches/**' ) }}
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            doxygen \
            graphviz \
            help2man \
            python3-docutils \
            pngcrush \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libextractor-plugins-all \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: bootstrap source tree
      run: |
        # If we restored cached bootstrap tools their timestamps will be older
        # than checked out files, but we stored them based on a hash of the
        # files in git that determine what gets built so we know they are in
        # fact up to date.  Just touch any stamp files that exist.
        touch --no-create INST/*.stamp
        export PATH=/usr/lib/ccache:$PATH
        echo verbose=off > ~/.wgetrc
        ./bootstrap xapian-core xapian-applications/omega swig xapian-bindings xapian-letor
    - name: configure
      run: ./configure CC='ccache gcc' CXX='ccache g++'
    - name: make
      run: make -j2
    - name: Run tests
      run: make -j2 check AUTOMATED_TESTING=1 VERBOSE=1
    - name: Create distribution tarball
      run: |
        make dist
    - uses: actions/upload-artifact@v4
      with:
        path: |
          xapian-core/xapian-core-*.tar.xz
          xapian-applications/omega/xapian-omega-*.tar.xz
          xapian-bindings/xapian-bindings-*.tar.xz
          xapian-letor/xapian-letor-*.tar.xz
        # Files are already compressed so don't try to compress again.
        compression-level: 0
        retention-days: 1
        if-no-files-found: error
    - name: Check generated files are in .gitignore
      # grep '^' passes through all input while giving a non-zero exit status
      # if that input is empty.
      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  freebsd:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Fetch distribution
      uses: actions/download-artifact@v4
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        # Do actual unpacking in the VM, mostly to help reduce the size of the
        # rsync output in the logs.
    - uses: vmactions/freebsd-vm@v1
      # Limit wasted resources if the VM action gets into an infinite loop.
      timeout-minutes: 60
      with:
        # The default is csh!
        usesh: true
        prepare: |
          set -e
          pkg install -y bash ccache perl5 pcre2
          ccache --set-config=cache_dir="$HOME/work/.ccache"
          ccache --set-config=max_size='500M'
          ccache --set-config=compression=true
        run: |
          set -e
          export CC='ccache cc'
          export CXX='ccache c++'
          mv *.tar.xz "$HOME"
          cd
          mkdir xapian-core
          cd xapian-core
          tar --strip-components=1 -xf "$HOME/xapian-core-*.tar.xz"
          ./configure --enable-werror
          export XAPIAN_CONFIG=$PWD/xapian-config
          cd ..
          mkdir -p xapian-applications/omega
          cd xapian-applications/omega
          tar --strip-components=1 -xf "$HOME/xapian-omega-*.tar.xz"
          ./configure --enable-werror
          cd ../..
          # mkdir xapian-bindings
          # cd xapian-bindings
          # tar --strip-components=1 -xf "$HOME/xapian-bindings-*.tar.xz"
          # cd ..
          mkdir xapian-letor
          cd xapian-letor
          tar --strip-components=1 -xf "$HOME/xapian-letor-*.tar.xz"
          ./configure --enable-werror
          cd ..
          rm -f *.tar.xz
          # Everything gets run in one script so use V=0 to reduce the size of
          # the log, but re-run without V=0 on failure to show the compiler
          # command line.
          make -j2 -C xapian-core V=0 || make -C xapian-core
          make -j2 -C xapian-applications/omega V=0 || make -C xapian-core
          make -j2 -C xapian-letor V=0 || make -C xapian-letor
          export AUTOMATED_TESTING=1
          export VERBOSE=1
          make -j2 -C xapian-core check V=0
          make -j2 -C xapian-applications/omega check V=0
          make -j2 -C xapian-letor check V=0

  dragonfly:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Fetch distribution
      uses: actions/download-artifact@v4
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        # Do actual unpacking in the VM, mostly to help reduce the size of the
        # rsync output in the logs.
    - uses: vmactions/dragonflybsd-vm@v1
      # Limit wasted resources if the VM action gets into an infinite loop.
      timeout-minutes: 60
      with:
        usesh: true
        prepare: |
          set -e
          pkg install -y bash ccache perl5 pcre2
          ccache --set-config=cache_dir="$HOME/work/.ccache"
          ccache --set-config=max_size='500M'
          ccache --set-config=compression=true
        run: |
          set -e
          export CC='ccache cc'
          export CXX='ccache c++'
          mv *.tar.xz "$HOME"
          cd
          mkdir xapian-core
          cd xapian-core
          tar --strip-components=1 -xf "$HOME/xapian-core-*.tar.xz"
          ./configure --enable-werror
          export XAPIAN_CONFIG=$PWD/xapian-config
          cd ..
          mkdir -p xapian-applications/omega
          cd xapian-applications/omega
          tar --strip-components=1 -xf "$HOME/xapian-omega-*.tar.xz"
          ./configure --enable-werror
          cd ../..
          # mkdir xapian-bindings
          # cd xapian-bindings
          # tar --strip-components=1 -xf "$HOME/xapian-bindings-*.tar.xz"
          # cd ..
          mkdir xapian-letor
          cd xapian-letor
          tar --strip-components=1 -xf "$HOME/xapian-letor-*.tar.xz"
          ./configure --enable-werror
          cd ..
          rm -f *.tar.xz
          # Everything gets run in one script so use V=0 to reduce the size of
          # the log, but re-run without V=0 on failure to show the compiler
          # command line.
          make -j2 -C xapian-core V=0 || make -C xapian-core
          make -j2 -C xapian-applications/omega V=0 || make -C xapian-core
          make -j2 -C xapian-letor V=0 || make -C xapian-letor
          export AUTOMATED_TESTING=1
          export VERBOSE=1
          make -j2 -C xapian-core check V=0
          make -j2 -C xapian-applications/omega check V=0
          make -j2 -C xapian-letor check V=0

  netbsd:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Fetch distribution
      uses: actions/download-artifact@v4
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        # Do actual unpacking in the VM, mostly to help reduce the size of the
        # rsync output in the logs.
    - uses: vmactions/netbsd-vm@v1
      # Limit wasted resources if the VM action gets into an infinite loop.
      timeout-minutes: 60
      with:
        # Default is ksh, which should be OK.
        # usesh: true
        prepare: |
          set -e
          /usr/sbin/pkg_add -u ccache perl pcre2
          ccache --set-config=cache_dir="$HOME/work/.ccache"
          ccache --set-config=max_size='500M'
          ccache --set-config=compression=true
        run: |
          set -e
          ulimit
          export CC='ccache cc'
          export CXX='ccache c++'
          mv *.tar.xz "$HOME"
          cd
          mkdir xapian-core
          cd xapian-core
          tar --strip-components=1 -xf "$HOME/xapian-core-*.tar.xz"
          ./configure --enable-werror
          export XAPIAN_CONFIG=$PWD/xapian-config
          cd ..
          mkdir -p xapian-applications/omega
          cd xapian-applications/omega
          tar --strip-components=1 -xf "$HOME/xapian-omega-*.tar.xz"
          ./configure --enable-werror
          cd ../..
          # mkdir xapian-bindings
          # cd xapian-bindings
          # tar --strip-components=1 -xf "$HOME/xapian-bindings-*.tar.xz"
          # cd ..
          mkdir xapian-letor
          cd xapian-letor
          tar --strip-components=1 -xf "$HOME/xapian-letor-*.tar.xz"
          ./configure --enable-werror
          cd ..
          rm -f *.tar.xz
          # Everything gets run in one script so use V=0 to reduce the size of
          # the log, but re-run without V=0 on failure to show the compiler
          # command line.
          make -j2 -C xapian-core V=0 || make -C xapian-core
          make -j2 -C xapian-applications/omega V=0 || make -C xapian-core
          make -j2 -C xapian-letor V=0 || make -C xapian-letor
          export AUTOMATED_TESTING=1
          export VERBOSE=1
          make -j2 -C xapian-core check V=0
          make -j2 -C xapian-applications/omega check V=0
          make -j2 -C xapian-letor check V=0

  checkpatch:
    name: 'Automated run of xapian-check-patch'
    runs-on: 'ubuntu-latest'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        show-progress: false
    - name: "Automated run of xapian-check-patch"
      # Run the style checking script, checking changes between the common
      # ancestor of the target branch of the PR (or master if this isn't a PR)
      # and the revision being checked.
      run: |
        git diff origin/${GITHUB_BASE_REF:-master}.. --|xapian-maintainer-tools/xapian-check-patch
