name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: master
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  makedist:
    name: 'make dist'
    runs-on: 'ubuntu-latest'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: makedist
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            doxygen \
            graphviz \
            help2man \
            python3-docutils \
            pngcrush \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libextractor-plugins-all \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: bootstrap source tree
      run: |
        echo verbose=off > ~/.wgetrc
        ./bootstrap xapian-core xapian-applications/omega swig xapian-bindings xapian-letor
    - name: configure
      run: ./configure
    - name: make
      run: make -j2
#    - name: Run tests
#      run: make -j2 check VERBOSE=1 AUTOMATED_TESTING=1
    - name: Create distribution tarball
      run: |
        make dist
    - uses: actions/upload-artifact@v3
      with:
        path: |
          xapian-core/xapian-core-*.tar.xz
          xapian-applications/omega/xapian-omega-*.tar.xz
          xapian-bindings/xapian-bindings-*.tar.xz
          xapian-letor/xapian-letor-*.tar.xz
        retention-days: 1
        if-no-files-found: error
    - name: Check generated files are in .gitignore
      # grep '^' passes through all input while giving a non-zero exit status
      # if that input is empty.
      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  GLIBCXX_DEBUG:
    runs-on: 'ubuntu-20.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: GLIBCXX_DEBUG
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.3 \
            liblua5.3-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-2.6-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer
      # tesseract's C++ API uses std::vector so would need rebuilding with
      # -D_GLIBCXX_DEBUG too.
      #      libtesseract-dev \
      #      tesseract-ocr-eng
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        export CPPFLAGS='-D_GLIBCXX_DEBUG'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  FORTIFY_SOURCE_3:
    # _FORTIFY_SOURCE level 3 requires GCC 12, so currently we need to use
    # Ubuntu 22.04 and the gcc-12 and g++12 packages.
    runs-on: 'ubuntu-22.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: FORTIFY_SOURCE_3
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            gcc-12 \
            g++-12 \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libextractor-plugins-all \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: configure
      run: |
        export CC='ccache gcc-12'
        export CXX='ccache g++-12'
        # Ubuntu's GCC packages define _FORTIFY_SOURCE=2 by default, so we need
        # to undefine it before we define it to avoid a warning (which becomes
        # an error with -Werror).
        export CPPFLAGS='-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  assertions:
    runs-on: 'ubuntu-22.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: assertions
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libextractor-plugins-all \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        pushd xapian-core
        ./configure --enable-assertions
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  debug-log:
    runs-on: 'ubuntu-22.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: debug-log
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libextractor-plugins-all \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        pushd xapian-core
        ./configure --enable-log
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  clang:
    runs-on: 'ubuntu-20.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: clang
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        env
        sudo apt-get update
        sudo apt-get install \
            clang \
            libc++-dev
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-2.6-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libmwaw-dev \
            libtesseract-dev \
            tesseract-ocr-eng
            # libreoffice support doesn't work when compiled with clang on Linux
    - name: configure
      run: |
        export CC='ccache clang'
        # Build with the llvm c++ library to catch more portability issues.
        export CXX='ccache clang++ -stdlib=libc++'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure --with-python3 --with-tcl
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  # Test with the oldest clang version we easily can.
  clang6:
    runs-on: 'ubuntu-20.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: clang6
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        env
        sudo apt-get update
        sudo apt-get install \
            clang-6.0
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            python3-dev \
            tcl \
            tcl-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-2.6-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libmwaw-dev \
            libtesseract-dev \
            tesseract-ocr-eng
            # libreoffice support doesn't work when compiled with clang on Linux
    - name: configure
      run: |
        export CC='ccache clang-6.0'
        export CXX='ccache clang++-6.0'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure --with-python3 --with-tcl
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  # GCC 7 is the oldest GCC we currently aim to support.
  # Ubuntu 20.04 has GCC 7.5.0.
  GCC7:
    name: 'GCC 7'
    runs-on: 'ubuntu-20.04'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: GCC7
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            gcc-7 \
            g++-7
        sudo apt-get install \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.3 \
            liblua5.3-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-2.6-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: configure
      run: |
        export CC='ccache gcc-7'
        export CXX='ccache g++-7'
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  Emscripten:
    runs-on: 'ubuntu-20.04'
    services:
      emscripten:
        image: emscripten/emsdk
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: Emscripten
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: Use Node.js
      uses: actions/setup-node@v2
    - name: configure
      run: |
        docker run -v "$GITHUB_WORKSPACE:/src" -w /src/xapian-core emscripten/emsdk emconfigure ./configure CPPFLAGS='-DFLINTLOCK_USE_FLOCK' CXXFLAGS='-Oz -s USE_ZLIB=1 -fno-rtti' --disable-shared
    - name: make
      run: |
        docker run -v "$GITHUB_WORKSPACE:/src" -w /src/xapian-core emscripten/emsdk emmake make
    - name: Run tests
      run: |
        docker run -v "$GITHUB_WORKSPACE:/src" -w /src/xapian-core emscripten/emsdk em++ -Oz -s USE_ZLIB=1 -std=c++11 -s WASM=1 -Iinclude emscripten/xapianjstest.cc .libs/libxapian-1.5.a -o emscripten/xapianjstest.js
        cd xapian-core/emscripten && node xapianjstest.js


  macos:
    runs-on: 'macos-latest'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/local/lib/libextractor'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: macos
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        # Workaround apparent homebrew bug 2023-01-18
        rm -f /usr/local/bin/2to3-3.11 /usr/local/bin/idle3.11 /usr/local/bin/pydoc3.11 /usr/local/bin/python3.11 /usr/local/bin/python3.11-config
        rm -f /usr/local/bin/2to3 /usr/local/bin/idle3 /usr/local/bin/pydoc3 /usr/local/bin/python3 /usr/local/bin/python3-config
        brew update
        brew install \
            gmime \
            icu4c \
            libabw \
            libarchive \
            libcdr \
            libetonyek \
            libextractor \
            libiconv \
            libmagic \
            libmwaw \
            lua \
            mono-mdk \
            pcre2 \
            pkgconfig \
            poppler \
            pygments \
            python \
            sphinx-doc
        # homebrew tesseract 5.2.0 only extracts "ee" from img/Test1.gif (5.1.0
        # worked).
        # tesseract
    - name: configure
      run: |
        export CC='ccache gcc'
        export CXX='ccache g++'
        export PKG_CONFIG_PATH=/usr/local/opt/icu4c/lib/pkgconfig
        pushd xapian-core
        ./configure --prefix='${{ runner.temp }}/XapianInstall'
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure --with-libiconv-prefix=/usr/local/opt/libiconv
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j3 -C xapian-core
        make -j3 -C xapian-core install
        make -j3 -C xapian-applications/omega
        make -j3 -C xapian-bindings
        make -j3 -C xapian-letor
    - name: Run tests
      run: |
        make -j3 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j3 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j3 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j3 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  mingw64-i686-cross:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: mingw64-i686-cross
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            g++-mingw-w64-i686-win32 \
            mingw-w64-i686-dev \
            binutils-mingw-w64-i686 \
            libz-mingw-w64-dev \
            mingw-w64-tools
    - name: configure
      run: |
        # FIXME: Use ccache if that isn't happening automatically
        cd xapian-core
        ./configure --host i686-w64-mingw32
    - name: make
      run: |
        make -j2 -C xapian-core
      # FIXME: Run tests under wine?

  mingw64-x86-64-cross:
    runs-on: 'ubuntu-22.04'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: mingw64-x86-64-cross
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            g++-mingw-w64-x86-64-win32 \
            mingw-w64-x86-64-dev \
            binutils-mingw-w64-x86-64 \
            libz-mingw-w64-dev \
            mingw-w64-tools
    - name: configure
      run: |
        # FIXME: Use ccache if that isn't happening automatically
        cd xapian-core
        ./configure --host x86_64-w64-mingw32
    - name: make
      run: |
        make -j2 -C xapian-core
      # FIXME: Run tests under wine?

  mingw32-cross:
    runs-on: 'ubuntu-22.04'
    container: fedora:35
    needs: makedist
    steps:
    - name: Install build tools
      run: dnf install -y --nodocs ccache
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: mingw32-cross
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: Install package dependencies
      run: |
        dnf install -y --nodocs \
        gcc-c++ zlib-devel make pkg-config \
        mingw32-gcc-c++ mingw32-win-iconv-static \
        mingw32-winpthreads-static mingw32-zlib-static
    - name: configure
      run: |
        # FIXME: Use ccache if that isn't happening automatically
        cd xapian-core
        mingw32-configure
    - name: make
      run: |
        make -j2 -C xapian-core
      # FIXME: Run tests under wine?

  android-cross:
    runs-on: 'ubuntu-22.04'
    env:
      NDK: '/usr/local/lib/android/sdk/ndk/25.2.9519653'
      #NDK: '/home/runner/ndk'
      host_triplet: 'armv7a-linux-androideabi33'
    needs: makedist
    steps:
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: android-cross
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
    - name: configure
      run: |
        # FIXME: Use ccache if that isn't happening automatically
        PATH=$PATH:$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin
        cd xapian-core
        ./configure \
            --host=$host_triplet \
            CC=${host_triplet}-clang \
            CXX=${host_triplet}-clang++ \
            PKG_CONFIG=/bin/false
    - name: make
      run: |
        PATH=$PATH:$NDK/toolchains/llvm/prebuilt/linux-x86_64/bin
        make -j2 -C xapian-core
      # FIXME: Run tests under wine?

  cygwin:
    runs-on: 'windows-latest'
    needs: makedist
    defaults:
      run:
        # `-o incr` needed as GHA supplies shell fragments with DOS EOLs.
        shell: 'C:\tools\cygwin\bin\bash.EXE --noprofile --norc -e -o igncr -o pipefail {0}'
    steps:
    - name: Install Cygwin
      uses: egor-tensin/setup-cygwin@v4
      with:
        packages: gcc-g++ make file-devel libpcre2-devel zlib-devel liblua-devel lua perl python3-devel ruby-devel ruby-test-unit tcl-devel libcrypt-devel
      # php-devel is PHP7 still (2023-07-14)
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    # FIXME: ccache?
    - name: configure
      run: |
        export PERL_LIBS=`perl -MConfig -e 'print "-L$Config{archlib}/CORE" -lperl'`
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  windows:
    runs-on: 'windows-latest'
    needs: makedist
    steps:
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64
    - name: Install package dependencies
      run: |
        choco install make
    - name: Build zlib
      run: |
        which link
        which link.exe
        rm /usr/bin/link || true
        rm /usr/bin/link.exe || true
        echo "$PATH"
        mkdir zlib
        cd zlib
        curl --retry 5 --retry-connrefused -L https://github.com/xapian/xapian-dev-deps/releases/download/current/zlib-1.2.13.tar.gz|tar --strip-components=1 -zxf -
        # Don't build zlib with -MD as it seems this flag needs to be used
        # consistently across the build.
        sed -i 's/\(^CFLAGS  *= *-nologo \)-MD /\1/' win32/Makefile.msc
        # Don't build zlib with a fixed base address on x64 as that gives
        # linker warning LNK4281.  FIXME: only for x64
        sed -i 's/-base:0x[0-9A-Fa-f]* //' win32/Makefile.msc
        nmake -nologo -f 'win32\Makefile.msc' LD=link.exe
    - name: configure
      run: |
        export AR=lib
        export CC='cl -nologo'
        export CXX="$PWD/xapian-core/compile cl -nologo"
        # Standard C++ stack unwinding; assume extern "C" functions never throw.
        export CPPFLAGS="-I$PWD/zlib"
        export CXXFLAGS=-EHsc
        export LDFLAGS="-L$PWD/zlib"
        pushd xapian-core
        ./configure
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure
        popd
        pushd xapian-bindings
        ./configure
        popd
        pushd xapian-letor
        ./configure
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        make -j2 -C xapian-core check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
        make -j2 -C xapian-bindings check VERBOSE=1 AUTOMATED_TESTING=1
        # make -j2 -C xapian-letor check VERBOSE=1 AUTOMATED_TESTING=1

  checkpatch:
    name: 'Automated run of xapian-check-patch'
    runs-on: 'ubuntu-latest'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: "Automated run of xapian-check-patch"
      # Run the style checking script, checking changes between the common
      # ancestor of the target branch of the PR (or master if this isn't a PR)
      # and the revision being checked.
      run: |
        echo "GITHUB_BASE_REF='$GITHUB_BASE_REF'"
        git diff ${GITHUB_BASE_REF:-origin/master}.. --|xapian-maintainer-tools/xapian-check-patch
