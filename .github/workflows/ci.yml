name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: master
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  makedist:
    name: 'make dist'
    runs-on: 'ubuntu-latest'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v4
      with:
        show-progress: false
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Cache bootstrap tools
      uses: actions/cache@v4
      with:
        path: |
          BUILD
          INST
        key: ${{ github.job }}-${{ runner.os }}-${{ hashFiles( 'bootstrap', 'patches/**' ) }}
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            doxygen \
            graphviz \
            help2man \
            python3-docutils \
            pngcrush \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            pkg-config
    - name: bootstrap source tree
      run: |
        # If we restored cached bootstrap tools their timestamps will be older
        # than checked out files, but we stored them based on a hash of the
        # files in git that determine what gets built so we know they are in
        # fact up to date.  Just touch any stamp files that exist.
        touch --no-create INST/*.stamp
        export PATH=/usr/lib/ccache:$PATH
        echo verbose=off > ~/.wgetrc
        ./bootstrap xapian-core xapian-applications/omega xapian-letor
    - name: configure
      run: ./configure CC='ccache gcc' CXX='ccache g++' CFLAGS=-O0 CXXFLAGS=-O0
    - name: make
      run: make -j2
    - name: Create distribution tarball
      run: |
        make dist
    - uses: actions/upload-artifact@v4
      with:
        path: |
          xapian-core/xapian-core-*.tar.xz
          xapian-applications/omega/xapian-omega-*.tar.xz
          xapian-letor/xapian-letor-*.tar.xz
        # Files are already compressed so don't try to compress again.
        compression-level: 0
        retention-days: 1
        if-no-files-found: error
    - name: Check generated files are in .gitignore
      # grep '^' passes through all input while giving a non-zero exit status
      # if that input is empty.
      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  msvc2019:
    runs-on: 'windows-2019'
    needs: makedist
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        release: true # Use the pre-installed MSYS2
        path-type: inherit
        install: base-devel
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
        variant: sccache
    - name: Fetch distribution
      uses: actions/download-artifact@v4
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        # pushd xapian-bindings
        # tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        # popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64
    - name: Install dependencies
      shell: bash
      run: |
        vcpkg install libmagic pcre2 zlib
    - name: configure
      run: |
        export PKG_CONFIG_LIBDIR=/c/vcpkg/installed/x64-windows/lib/pkgconfig:/c/vcpkg/installed/x64-windows/share/pkgconfig
        export PKG_CONFIG_PATH=/c/vcpkg/installed/x64-windows/lib/pkgconfig:/c/vcpkg/installed/x64-windows/share/pkgconfig
        pkg-config --list-all
        echo "==="
        pkg-config --cflags zlib || true
        echo "==="
        pkg-config --libs zlib || true
        echo "==="
        pkg-config --cflags libmagic || true
        echo "==="
        pkg-config --libs libmagic || true
        echo "==="
        pkg-config --cflags libpcre2-8 || true
        echo "==="
        pkg-config --libs libpcre2-8 || true
        echo "==="
        ls -l /c/vcpkg/installed
        echo "==="
        ls -l /c/vcpkg/installed/x64-windows
        echo "==="
        ls -l /c/vcpkg/installed/x64-windows/lib
        echo "==="
        ls -l /c/vcpkg/installed/x64-windows/lib/pkgconfig
        echo "==="
        ls -l /c/vcpkg/installed/x64-windows/share/pkgconfig||true
        echo "==="
        ls -l /c/vcpkg/installed/x64-windows/bin
        echo "==="
        export AR=lib
        export CC="cl -nologo"
        export CXX="$PWD/xapian-core/compile cl -nologo"
        export CPPFLAGS=-Ic:/vcpkg/installed/x64-windows/include
        # Standard C++ stack unwinding; assume extern "C" functions never throw.
        export CXXFLAGS=-EHsc
        export LDFLAGS="-L'$VCPKG_INSTALLATION_ROOT/installed/x64-windows/bin' -L'$VCPKG_INSTALLATION_ROOT/installed/x64-windows/lib'"
        PATH=$VCPKG_INSTALLATION_ROOT/installed/x64-windows/bin:/c/Users/runneradmin/.cargo/bin:$PATH
        pushd xapian-core
        ./configure --enable-werror
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure --enable-werror
        popd
        # pushd xapian-bindings
        # ./configure --enable-werror
        # popd
        pushd xapian-letor
        ./configure --enable-werror
        popd
    - name: make
      run: |
        PATH=/c/Users/runneradmin/.cargo/bin:$PATH
        make -j2 -C xapian-core
        echo XYZZY
        ls -l xapian-core/.libs
        make -j2 -C xapian-applications/omega
        # make -j2 -C xapian-binding
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        PATH=/c/Users/runneradmin/.cargo/bin:$PATH
        export AUTOMATED_TESTING=1
        export VERBOSE=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        # make -j2 -C xapian-bindings check
        make -j2 -C xapian-letor check
    - name: Save log files
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        name: logs-${{ github.job }}-${{ github.sha }}
        overwrite: true
        path: |
          **/*.log

  msvc2022:
    runs-on: 'windows-2022'
    needs: makedist
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        release: true # Use the pre-installed MSYS2
        path-type: inherit
        #        msystem: mingw64
        install: base-devel
        pacboy: >-
          file:p
          pcre2:p
          zlib:p
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
        variant: sccache
    - name: Fetch distribution
      uses: actions/download-artifact@v4
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        # pushd xapian-bindings
        # tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        # popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: Set up Visual Studio shell
      uses: egor-tensin/vs-shell@v2
      with:
        arch: x64
    - name: configure
      run: |
        export AR=lib
        export CC="cl -nologo"
        export CXX="$PWD/xapian-core/compile cl -nologo"
        # Standard C++ stack unwinding; assume extern "C" functions never throw.
        export CXXFLAGS=-EHsc
        export LD=link
        export NM=dumpbin
        export CPPFLAGS=-I/c/mingw64/x86_64-w64-mingw32/include
        export LDFLAGS=-I/c/mingw64/x86_64-w64-mingw32/lib
        PATH=/c/Users/runneradmin/.cargo/bin:$PATH
        pushd xapian-core
        ./configure --enable-werror --disable-shared
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure --enable-werror
        popd
        # pushd xapian-bindings
        # ./configure --enable-werror
        # popd
        pushd xapian-letor
        ./configure --enable-werror --disable-shared
        popd
    - name: make
      run: |
        PATH=/c/Users/runneradmin/.cargo/bin:$PATH
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        # make -j2 -C xapian-binding
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        PATH=/c/Users/runneradmin/.cargo/bin:$PATH
        export AUTOMATED_TESTING=1
        export VERBOSE=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        # make -j2 -C xapian-bindings check
        make -j2 -C xapian-letor check
