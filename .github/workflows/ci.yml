name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: master
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
#  makedist:
#    name: 'make dist'
#    runs-on: 'ubuntu-latest'
#    env:
#      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
#    steps:
#    - name: Check out repository code
#      uses: actions/checkout@v4
#      with:
#        show-progress: false
#    - name: Install CCache
#      uses: hendrikmuhs/ccache-action@v1
#      with:
#        key: ${{ github.job }}
#    - name: Cache bootstrap tools
#      uses: actions/cache@v4
#      with:
#        path: |
#          BUILD
#          INST
#        key: ${{ github.job }}-${{ runner.os }}-${{ hashFiles( 'bootstrap', 'patches/**' ) }}
#    - name: Install package dependencies
#      run: |
#        sudo apt-get update
#        sudo apt-get install \
#            doxygen \
#            graphviz \
#            help2man \
#            python3-docutils \
#            pngcrush \
#            python3-sphinx \
#            uuid-dev \
#            libpcre2-dev \
#            libmagic-dev \
#            lua5.4 \
#            liblua5.4-dev \
#            mono-devel \
#            python3-dev \
#            tcl \
#            tcl-dev \
#            libicu-dev \
#            pkg-config \
#            libpoppler-glib-dev \
#            libglib2.0-dev \
#            libe-book-dev \
#            libetonyek-dev \
#            libgepub-0.6-dev \
#            libgmime-3.0-dev \
#            libarchive-dev \
#            libabw-dev \
#            libcdr-dev \
#            libextractor-dev \
#            libextractor-plugins-all \
#            libmwaw-dev \
#            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
#            libtesseract-dev \
#            tesseract-ocr-eng
#    - name: bootstrap source tree
#      run: |
#        # If we restored cached bootstrap tools their timestamps will be older
#        # than checked out files, but we stored them based on a hash of the
#        # files in git that determine what gets built so we know they are in
#        # fact up to date.  Just touch any stamp files that exist.
#        touch --no-create INST/*.stamp
#        export PATH=/usr/lib/ccache:$PATH
#        echo verbose=off > ~/.wgetrc
#        ./bootstrap xapian-core xapian-applications/omega swig xapian-bindings xapian-letor
#    - name: configure
#      run: ./configure CC='ccache gcc' CXX='ccache g++' CXXFLAGS=-O0
#    - name: make
#      run: make -j2
#    - name: Create distribution tarball
#      run: |
#        make dist
#    - uses: actions/upload-artifact@v4
#      with:
#        path: |
#          xapian-core/xapian-core-*.tar.xz
#          xapian-applications/omega/xapian-omega-*.tar.xz
#          xapian-bindings/xapian-bindings-*.tar.xz
#          xapian-letor/xapian-letor-*.tar.xz
#        # Files are already compressed so don't try to compress again.
#        compression-level: 0
#        retention-days: 1
#        if-no-files-found: error
#    - name: Check generated files are in .gitignore
#      # grep '^' passes through all input while giving a non-zero exit status
#      # if that input is empty.
#      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  mingw-lseek-safety:
    runs-on: 'windows-latest'
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/checkout@v4
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ucrt64
        install: base-devel
        pacboy: >-
          gcc:p
    - name: test
      run: |
        gcc -Wall -W lseek-safety-test-win32.c -o a.exe
        ./a.exe TESTFILE
        ls -l TESTFILE

#  # opencsw's newest GCC is 5.5 which lack C++17 support.
#  solaris:
#    runs-on: 'ubuntu-22.04'
#      #    needs: makedist
#    steps:
#    - name: Install CCache
#      uses: hendrikmuhs/ccache-action@v1
#      with:
#        key: ${{ github.job }}
##    - name: Fetch distribution
##      uses: actions/download-artifact@v4
##    - name: Unpack distribution
##      run: |
##        mv artifact/* .
##        rmdir artifact
##        # Do actual unpacking in the VM, mostly to help reduce the size of the
##        # rsync output in the logs.
#    - uses: vmactions/solaris-vm@v1
#      # Limit wasted resources if the VM action gets into an infinite loop.
#      timeout-minutes: 60
#      with:
#        release: "11.4-gcc"
#        run: |
#          set -e
#          ulimit
#          find / -name '*CC' -print
#          find / -name '*++*' -print
