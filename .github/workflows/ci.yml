name: CI

# Use bash by default on all platforms.
defaults:
  run:
    shell: bash

on:
  push:
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'
  pull_request:
    branches: master
    paths-ignore:
      - '.appveyor.yml'
      - NEWS
      - 'xapian-maintainer-tools/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  makedist:
    name: 'make dist'
    runs-on: 'ubuntu-latest'
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    steps:
    - name: Check out repository code
      uses: actions/checkout@v3
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Cache bootstrap tools
      uses: actions/cache@v3
      with:
        path: |
          BUILD
          INST
        key: ${{ github.job }}-${{ runner.os }}-${{ hashFiles( 'bootstrap', 'patches/**' ) }}
    - name: Install package dependencies
      run: |
        sudo apt-get update
        sudo apt-get install \
            doxygen \
            graphviz \
            help2man \
            python3-docutils \
            pngcrush \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.6-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libextractor-plugins-all \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: bootstrap source tree
      run: |
        # If we restored cached bootstrap tools their timestamps will be older
        # than checked out files, but we stored them based on a hash of the
        # files in git that determine what gets built so we know they are in
        # fact up to date.  Just touch any stamp files that exist.
        touch --no-create INST/*.stamp
        export PATH=/usr/lib/ccache:$PATH
        echo verbose=off > ~/.wgetrc
        ./bootstrap xapian-core xapian-applications/omega swig xapian-bindings xapian-letor
    - name: configure
      run: ./configure CC='ccache gcc' CXX='ccache g++'
    - name: make
      run: make -j2
        #    - name: Run tests
        #      run: make -j2 check AUTOMATED_TESTING=1 VERBOSE=1
    - name: Create distribution tarball
      run: |
        make dist
    - uses: actions/upload-artifact@v3
      with:
        path: |
          xapian-core/xapian-core-*.tar.xz
          xapian-applications/omega/xapian-omega-*.tar.xz
          xapian-bindings/xapian-bindings-*.tar.xz
          xapian-letor/xapian-letor-*.tar.xz
        retention-days: 1
        if-no-files-found: error
    - name: Check generated files are in .gitignore
      # grep '^' passes through all input while giving a non-zero exit status
      # if that input is empty.
      run: git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true

  clang-santisers-debian:
    runs-on: 'ubuntu-latest'
    container: debian:experimental
    env:
      LIBEXTRACTOR_PREFIX: '/usr/lib/x86_64-linux-gnu/libextractor'
    needs: makedist
    steps:
    - name: Install package dependencies
      run: |
        apt-get update
        apt-get install -y \
            clang-17 \
            ccache \
            xz-utils \
            python3-sphinx \
            uuid-dev \
            libpcre2-dev \
            libmagic-dev \
            lua5.4 \
            liblua5.4-dev \
            mono-devel \
            python3-dev \
            tcl \
            tcl-dev \
            libicu-dev \
            pkg-config \
            libpoppler-glib-dev \
            libglib2.0-dev \
            libe-book-dev \
            libetonyek-dev \
            libgepub-0.7-dev \
            libgmime-3.0-dev \
            libarchive-dev \
            libabw-dev \
            libcdr-dev \
            libextractor-dev \
            libmwaw-dev \
            libreofficekit-dev libreoffice-calc libreoffice-draw libreoffice-impress libreoffice-writer \
            libtesseract-dev \
            tesseract-ocr-eng
    - name: Install CCache
      uses: hendrikmuhs/ccache-action@v1
      with:
        key: ${{ github.job }}
    - name: Fetch distribution
      uses: actions/download-artifact@v3
    - name: Unpack distribution
      run: |
        mv artifact/* .
        rmdir artifact
        pushd xapian-core
        tar --strip-components=1 -xf xapian-core-*.tar.xz
        popd
        pushd xapian-applications/omega
        tar --strip-components=1 -xf xapian-omega-*.tar.xz
        popd
        pushd xapian-bindings
        tar --strip-components=1 -xf xapian-bindings-*.tar.xz
        popd
        pushd xapian-letor
        tar --strip-components=1 -xf xapian-letor-*.tar.xz
        popd
    - name: configure
      run: |
        # We use clang here because (at least currently) it supports a few
        # extra sanitiser checks compared to GCC.
        export CC='ccache clang-17'
        export CXX='ccache clang++-17'
        # float-divide-by-zero, nullability and unsigned-overflow aren't
        # undefined behaviour checks, but they catch for things we don't expect
        # our code to do.
        export CXXFLAGS='-fsanitize=address,undefined,float-divide-by-zero,local-bounds,nullability,unsigned-integer-overflow -fsanitize-address-use-after-scope -fno-sanitize-recover=all -g -O2 -fno-omit-frame-pointer'
        pushd xapian-core
        ./configure --enable-werror
        export XAPIAN_CONFIG=$PWD/xapian-config
        popd
        pushd xapian-applications/omega
        ./configure --enable-werror
        popd
        pushd xapian-bindings
        # PHP calls dlopen() with "RTLD_DEEPBIND flag which is incompatible
        # with sanitizer runtime".
        #
        # -fsanitize=functions seems to fail at the dynamic link step for some
        # reason so just turn that off here for now.
        ./configure --enable-werror --without-php CXXFLAGS="$CXXFLAGS -fno-sanitize=function"
        popd
        pushd xapian-letor
        ./configure --enable-werror
        popd
    - name: make
      run: |
        make -j2 -C xapian-core
        make -j2 -C xapian-applications/omega
        make -j2 -C xapian-bindings MACOS_SIP_HACK_ENV='env LSAN_OPTIONS=leak_check_at_exit=0 LD_PRELOAD=libasan.so.8:libubsan.so.1'
        make -j2 -C xapian-letor
    - name: Run tests
      run: |
        export AUTOMATED_TESTING=1
        export VERBOSE=1
        make -j2 -C xapian-core check
        make -j2 -C xapian-applications/omega check
        make -j2 -C xapian-bindings check MACOS_SIP_HACK_ENV='env LSAN_OPTIONS=leak_check_at_exit=0 LD_PRELOAD=libasan.so.8:libubsan.so.1'
        make -j2 -C xapian-letor check
