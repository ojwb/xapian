# Right now, we build on containerised linux, which defaults to the
# ancient Ubuntu 12.04 LTS.  Specify "dist: trusty" so we get something
# which is "only" 2.5 years old.
dist: trusty
sudo: false
language: cpp
notifications:
  irc: "chat.freenode.net#xapian-devel"
env:
  global:
    # Tell bootstrap where to clone ./common from
    - XAPIAN_COMMON_CLONE_URL=https://github.com/xapian/xapian.git
    - HOMEBREW_PACKAGES='doxygen help2man graphviz pngcrush libmagic pcre python2 python'
matrix:
  include:
    - os: osx
      before_install:
        - brew update
        # python is now python3, but the travis macOS build isn't there yet
        # so we need to explicitly upgrade otherwise we end up with the old
        # python (which is 2.7.x) and the python2 package (which is also
        # 2.7.x). This step can be removed once travis ships with a more
        # recent homebrew.
        - brew upgrade python
        # "brew install" unhelpfully errors out if any package listed is
        # already installed and up-to-date, but travis change what's installed
        # by default from time to time so it's brittle to just filter out those
        # installed by default from the list we need.  Instead we ignore the
        # exit status from "brew install", then check later that
        # "brew list --versions" says all the packages requested are installed.
        - brew install $HOMEBREW_PACKAGES || true
        - brew list --versions $HOMEBREW_PACKAGES
        - pip2 install sphinx docutils
        - pip3 install sphinx
      env: PYTHON2=/usr/local/bin/python2 CXXFLAGS=-Wno-error=reserved-user-defined-literal CPPFLAGS=-I/tmp/xapian-libsvm-fixed-include confargs=--prefix=/Users/travis/XapianInstall installcore='make -C xapian-core install'


before_script:
  - ./bootstrap xapian-core xapian-applications/omega
  - ./configure $confargs CC="$USE_CC" CXX="$USE_CXX"
script:
  - make
  - $installcore
  - make -C xapian-applications/omega check VERBOSE=1 AUTOMATED_TESTING=1
  # grep '^' passes through all input while giving a non-zero exit status if
  # that input is empty.
  - git status --porcelain|grep '^' && { echo "The generated files listed above are not in .gitignore" ; exit 1; }; true
